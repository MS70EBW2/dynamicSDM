magick::image_read() %>% # reads each path file
magick::image_join() %>% # joins image
magick::image_animate(fps=1)
#Save GIF file to local directory
if(!missing(save.directory)){
if(!dir.exists(save.directory)){stop("save.directory does not exist")}
magick::image_write(GIF,paste0(save.directory,"/",projection.type,".gif"))
print(paste0("GIF successfully saved to ",save.directory,"/",projection.type,".gif"))}
#Save GIF file to Google Drive folder
if(!missing(save.drive.folder)){
# Check user email provided
if (missing(user.email)){stop("user.email is missing. Please provide user email linked to Google Drive account")}
#Initialise Google Drive
googledrive::drive_auth(email=user.email)
googledrive::drive_user()
filename<-paste0(tempfile(),".gif")
magick::image_write(GIF,filename) # Write image to temporary location for upload to Google Drive
googledrive::drive_upload(media=filename,path=googledrive::as_id(folderpath$id),name=paste0(projection.type,".gif"),overwrite=T)
print(paste0("GIF successfully saved to Google Drive location: ",save.drive.folder,"/",projection.type,".gif"))}} # Upload GIF to Google Drive folder
#dynamic_proj_GIF
projection.type<-"binary"
test_that("Successfully write GIF: binary", {
save.directory=tempdir()
projection.type<-c("binary")
filenames<-paste0(projection.type,".gif")
dynamic_proj_GIF(dates=c("2010-01-01","2010-04-01"),projection.type=projection.type,drive.folder="temporarysavedrivefolder",
save.drive.folder="temporary_folder_buffered_extraction",user.email=user.email,save.directory=tempdir())
expect_equal(file.exists(paste0(save.directory,"/",filenames[1])),TRUE)})
#dynamic_proj_GIF
projection.type<-"binary"
test_that("Successfully write GIF: binary", {
save.directory=tempdir()
projection.type<-c("binary")
filenames<-paste0(projection.type,".gif")
dynamic_proj_GIF(dates=c("2010-01-01","2010-04-01"),projection.type=projection.type,drive.folder="temporarysavedrivefolder",
save.drive.folder="temporary_folder_buffered_extraction",user.email=user.email,save.directory=tempdir())
expect_equal(file.exists(paste0(save.directory,"/",filenames[1])),TRUE)})
dynamic_proj_GIF<-function(dates,projection.type,drive.folder=NA,user.email=NA,local.directory=NA,save.drive.folder=NA,save.directory=NA){
# Check neccessary arguments have been provided
if(missing(drive.folder) && missing(local.directory)){stop("Please provide one of local.directory or drive.folder to import projection covariates from.")}
if(missing(save.directory) && missing(save.drive.folder)){stop("Please provide one of save.directory or save.drive.folder to export projection data.frame to.")}
# Match projection type to available options
projection.type<-match.arg(projection.type,choices=c("proportional","binary","abundance" , "stacked"))
tempfilelist<-NULL # Empty vector to bind list of written .png file names to
for(x in 1:length(dates)){ # Iterate through each projection date.
date<-dates[x]
### Read in projection rasters from local directory
if(!missing(local.directory)){
if(!dir.exists(local.directory)){stop("local.directory does not exist")}
# Get raster file name
filename<-list.files(local.directory,full.names = T) # List all files in the directory
filename<-filename[grep(date,filename)] # Select only file names for this date
filename<-filename[grep(projection.type,filename)]# Select only file names for this date and projection type. There should only be one matching this description in the directory. See function details for more information.
#Read raster file into R
projectionraster<-raster::raster(filename)}
### Read in projection rasters from Google Drive folder
if(!missing(drive.folder)){
# Check user email provided
if (missing(user.email)){stop("user.email is missing. Please provide user email linked to Google Drive account")}
#Initialise Google Drive
googledrive::drive_auth(email=user.email)
googledrive::drive_user()
# Get raster file name
filename<-googledrive::drive_ls(path = paste0(drive.folder))$name  # List all files in the Google Drive folder
filename<-filename[grep(date,filename)] # Select only file names for this date
filename<-filename[grep(projection.type,filename)] # Select only file names for this date and projection type. There should only be one matching this description in the folder. See function details for more information.
#Read raster file into R
pathforthisfile<-paste0(tempfile(),".tif") # Create temp file name
googledrive::drive_download(file=filename,path=pathforthisfile,overwrite=T) # Download projection raster to temporary folder
projectionraster<-raster::raster(pathforthisfile)}
# Convert raster into data frame for plotting data with ggplot2
projectionraster<-as.data.frame(raster::rasterToPoints(projectionraster))
colnames(projectionraster)<-c("x","y","value") # Rename columns
# Plot projection with ggplot2
plot<- ggplot2::ggplot(data = projectionraster) +
ggplot2::geom_raster(ggplot2::aes(x = x, y = y, fill = value))+
ggplot2::ggtitle(dates[x])+
ggplot2::scale_fill_gradientn(colours = terrain.colors(7),trans = 'reverse',name = projection.type)+
ggplot2::theme(panel.background =  ggplot2::element_rect(fill = "white", color = "white"),plot.title =  ggplot2::element_text(size=25,face = "bold",hjust = 0.5),
axis.line= ggplot2::element_blank(),axis.ticks= ggplot2::element_blank(),axis.text= ggplot2::element_blank(), legend.text =  ggplot2::element_text(size=24),
legend.title =  ggplot2::element_text(size=30,face="bold"))#+
# Save temporary  png file of plot
tempfilename<-paste0(tempfile(),".png")
tempfilelist<-c(tempfilelist,tempfilename)
png(file=paste0(tempfilename))
print(plot)
dev.off()}
# Read in all png images and create a GIF file
GIF<-tempfilelist %>%
magick::image_read() %>% # reads each path file
magick::image_join() %>% # joins image
magick::image_animate(fps=1)
#Save GIF file to local directory
if(!missing(save.directory)){
if(!dir.exists(save.directory)){stop("save.directory does not exist")}
magick::image_write(GIF,paste0(save.directory,"/",projection.type,".gif"))
print(paste0("GIF successfully saved to ",save.directory,"/",projection.type,".gif"))}
#Save GIF file to Google Drive folder
if(!missing(save.drive.folder)){
# Check user email provided
if (missing(user.email)){stop("user.email is missing. Please provide user email linked to Google Drive account")}
#Initialise Google Drive
googledrive::drive_auth(email=user.email)
googledrive::drive_user()
filename<-paste0(tempfile(),".gif")
magick::image_write(GIF,filename) # Write image to temporary location for upload to Google Drive
save.folderpath<-googledrive::drive_find(pattern=paste0(save.drive.folder), type='folder')
googledrive::drive_upload(media=filename,path=googledrive::as_id(save.folderpath$id),name=paste0(projection.type,".gif"),overwrite=T)
print(paste0("GIF successfully saved to Google Drive location: ",save.drive.folder,"/",projection.type,".gif"))}} # Upload GIF to Google Drive folder
#dynamic_proj_GIF
projection.type<-"binary"
test_that("Successfully write GIF: binary", {
save.directory=tempdir()
projection.type<-c("binary")
filenames<-paste0(projection.type,".gif")
dynamic_proj_GIF(dates=c("2010-01-01","2010-04-01"),projection.type=projection.type,drive.folder="temporarysavedrivefolder",
save.drive.folder="temporary_folder_buffered_extraction",user.email=user.email,save.directory=tempdir())
expect_equal(file.exists(paste0(save.directory,"/",filenames[1])),TRUE)})
# test dynamic_proj
data("sample_model_data")
sample_model_data_test<-dplyr::sample_n(sample_model_data,100)
sample_model_data_train<-dplyr::sample_n(sample_model_data,100)
results1<-brt_fit(occ.data = sample_model_data_train,response.var.col = "presence.absence",block.col="blockno",distribution="bernoulli",varnames=colnames(sample_model_data_train)[9:12])
results1_eval<-brt_eval(occ.data=sample_model_data_test, model=results1,block.col="blockno",response.var.col= "presence.absence",eval.stat=c("auc"))
sample_model_data_train_abund<-sample_model_data[sample_model_data$individualCount>0 ,]
sample_model_data_train_abund<-sample_model_data_train_abund[!is.na(sample_model_data_train_abund$individualCount),]
sample_model_data_train_abund$individualCount<-log10(1+sample_model_data_train_abund$individualCount)
sample_model_data_train_abund_test.data<-dplyr::sample_n(sample_model_data_train_abund,415)
sample_model_data_train_abund<-dplyr::sample_n(sample_model_data_train_abund,415)
results3<-brt_fit(occ.data = sample_model_data_train_abund,response.var.col = "individualCount",block.col="blockno",distribution="gaussian",varnames=colnames(sample_model_data_train)[9:12])
results3_eval<-brt_eval(occ.data=sample_model_data_train_abund_test.data, model=results3,block.col="blockno",response.var.col= "individualCount",eval.stat=c("rsq"))
user.email<-as.character(gargle::gargle_oauth_sitrep()$email)
#dynamic_proj_covariates
dates=c("2010-01-01","2010-04-01")
Extent<-raster::extent(c(12,36,-35,-12))
test_that("Works if spatial.ext = polygon", {
dates=c("2010-01-01","2010-04-01")
polygon<-sp::Polygon(cbind(c(12,12,36,36),c(-35,-12,-35,-12)))
results<-dynamic_proj_covariates(dates=dates,varnames=c("Temperaturemean","TemperatureEightmean","Precipitationsum","Precipitation8Wsum"),user.email=user.email,drive.folder="temporary_folder_buffered_extraction",
spatial.ext=polygon,spatial.res.degrees=0.05,resample.method="bilinear",
save.drive.folder = "testfiles")
expect_equal(length(results),length(dates))})
### dynamic_proj
test_that("Success if projection.method = all", {
dates=c("2010-01-01","2010-04-01")
save.directory=tempdir()
filenames<-paste0(dates,"_stacked.tif")
dynamic_proj(dates=c("2010-01-01","2010-04-01"),drive.folder = "testfiles",user.email = user.email,
projection.method=c("binary","proportional","abundance","stacked"),sdm.mod =results1,sdm.thresh = 0.5,sdm.weight = as.numeric(unlist(results1_eval)),
sam.mod = results3,sam.weight =as.numeric(unlist(results3_eval)), save.drive.folder = "temporarysavedrivefolder", save.directory=tempdir())
expect_equal(file.exists(paste0(save.directory,"/",filenames[2])),TRUE)})
#dynamic_proj_GIF
projection.type<-"binary"
test_that("Successfully write GIF: binary", {
save.directory=tempdir()
projection.type<-c("binary")
filenames<-paste0(projection.type,".gif")
dynamic_proj_GIF(dates=c("2010-01-01","2010-04-01"),projection.type=projection.type,drive.folder="temporarysavedrivefolder",
save.drive.folder="temporary_folder_buffered_extraction",user.email=user.email,save.directory=tempdir())
expect_equal(file.exists(paste0(save.directory,"/",filenames[1])),TRUE)})
library(testthat)
devtools::load_all()
devtools::document()
devtools::test_coverage()
devtools::test_coverage()
devtools::load_all()
devtools::document()
devtools::test_coverage()
data("sample_occ_abs_data")
sample_occ_abs_data_fortest<-sample_occ_abs_data[sample_occ_abs_data$year==2010,]
sample_occ_abs_data_fortest<-dplyr::sample_n(sample_occ_abs_data_fortest,5)
test_bandname<-"LST_Day_1km"
test_datasetname<-"MODIS/006/MOD11A1"
data("sample_occ_abs_data")
sample_occ_abs_data_fortest<-sample_occ_abs_data[sample_occ_abs_data$year==2010,]
sample_occ_abs_data_fortest<-dplyr::sample_n(sample_occ_abs_data_fortest,4)
test_bandname<-"LST_Day_1km"
test_datasetname<-"MODIS/006/MOD11A1"
test_that("stops if no occcurence data provided", {
expect_error(extract_dynamic_coords(datasetname=test_datasetname,bandname=test_bandname,spatial.res.metres=1000,temporal.res=7,temporal.direction="prior",GEE.math.fun="mean",
save.method="split",save.directory=tempdir()))})
test_that("stops if no datasetname provided", {
expect_error(extract_dynamic_coords(occ=sample_occ_abs_data_fortest,bandname=test_bandname,spatial.res.metres=1000,temporal.res=7,temporal.direction="prior",GEE.math.fun="mean",
save.method="split",save.directory=tempdir()))})
test_that("stops if no bandname provided", {
expect_error(extract_dynamic_coords(occ=sample_occ_abs_data_fortest,datasetname=test_datasetname,spatial.res.metres=1000,temporal.res=7,temporal.direction="prior",GEE.math.fun="mean",
save.method="split",save.directory=tempdir()))})
devtools::test_coverage()
devtools::load_all()
devtools::document()
devtools::test_coverage()
devtools::load_all()
data("sample_occ_abs_data")
sample_occ_abs_data_fortest<-sample_occ_abs_data[sample_occ_abs_data$year==2010,]
sample_occ_abs_data_fortest<-dplyr::sample_n(sample_occ_abs_data_fortest,3)
test_bandname<-"LST_Day_1km"
test_datasetname<-"MODIS/006/MOD11A1"
test.spatial.res.metres<-111320
user.email<-as.character(gargle::gargle_oauth_sitrep()$email)
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="month",
temporal.res=7,
temporal.direction="post",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="month",
temporal.res=7,
temporal.direction="post",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="post",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
ee <- reticulate::import("ee")
googledrive::drive_auth(email=user.email)
googledrive::drive_user()
## Load Google Earth Engine
rgee::ee_check("rgee")
rgee::ee_Initialize(drive=T)
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="month",
temporal.res=7,
temporal.direction="post",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
devtools::load_all()
devtools::document()
devtools::test_coverage()
devtools::test_coverage()
data("sample_occ_abs_data")
sample_occ_abs_data_fortest<-sample_occ_abs_data[sample_occ_abs_data$year==2010,]
sample_occ_abs_data_fortest<-dplyr::sample_n(sample_occ_abs_data_fortest,3)
test_bandname<-"LST_Day_1km"
test_datasetname<-"MODIS/006/MOD11A1"
test.spatial.res.metres<-111320
user.email<-as.character(gargle::gargle_oauth_sitrep()$email)
test_that("stops if no occcurence data provided", {
expect_error(extract_buffered_coords(
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no moving.window.matrix provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
datasetname=test_datasetname,
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no datasetname provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no drive folder provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
user.email=user.email,
bandname=test_bandname,
datasetname=test_datasetname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no bandname provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no spatial.res provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no temporal.direction provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no math.fun provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
save.method="split",
save.directory=tempdir()))})
test_that("stops if no save.method provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.directory=tempdir()))})
test_that("stops if no save.method not accepted", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
save.method="NA",
temporal.direction="prior",
GEE.math.fun="mean",
save.directory=tempdir()))})
test_that("stops if no save.directory provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split"))})
test_that("stops if more than one math.fun provided", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun=c("mean","sum"),
save.method="split",
save.directory=tempdir()))})
test_that("stops if save.directory doesn't exist", {
expect_error(extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory="notrealdirectory"))})
test_that("Works if temporal.level = year with prior", {
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
expect_equal(length(unique(sample_occ_abs_data_fortest$year)),nrow(sample_occ_abs_data_fortest))})
test_that("Works if temporal.level = year with prior", {
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="year",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
expect_equal(length(unique(sample_occ_abs_data_fortest$year)),length(results))})
test_that("Works if temporal.level = day with prior", {
results<-extract_buffered_coords(occ.data=sample_occ_abs_data_fortest,
moving.window.matrix=matrix(1/9,nrow=3,ncol=3),
extraction.drive.folder="temporary_folder_buffered_extraction",
user.email=user.email,
datasetname=test_datasetname,
bandname=test_bandname,
spatial.res.metres=test.spatial.res.metres,
temporal.level="day",
temporal.res=7,
temporal.direction="prior",
GEE.math.fun="mean",
save.method="split",
save.directory=tempdir())
expect_equal(nrow(unique(sample_occ_abs_data_fortest[,c("year","month","day")])),nrow(results))})
nrow(unique(sample_occ_abs_data_fortest[,c("year","month","day")]))
nrow(results)
results
devtools::test_coverage()
datelist<-c("2010-01-01","2011-01-01")
results<-extract_dynamic_raster(spatial.ext=c(0,0,20,20),dates=c("2010-01-01","2011-01-01"),temporal.res=14,temporal.direction="post",
datasetname=test_datasetname,bandname=test_bandname,spatial.res.metres=10000,
GEE.math.fun="mean",user.email=user.email,save.drive.folder="temporary_folder_buffered_extraction")
results
length(datelist)
length(results)
expect_equal(length(results),length(datelist)
)
test_that("Success if temporal.direction post used", {
datelist<-c("2010-01-01","2011-01-01")
results<-extract_dynamic_raster(spatial.ext=c(0,0,20,20),dates=c("2010-01-01","2011-01-01"),temporal.res=14,temporal.direction="post",
datasetname=test_datasetname,bandname=test_bandname,spatial.res.metres=10000,
GEE.math.fun="mean",user.email=user.email,save.drive.folder="temporary_folder_buffered_extraction")
expect_equal(length(results),length(datelist))})
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::test_coverage()
usethis::use_coverage("codecov")
devtools::check()()
covr::codecov(token = "53ed3c76-6f5f-470d-b03a-e489266eeb77")
