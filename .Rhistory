fff<-list2[6]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc2 <- crop(ra, e)
rc2<-crop(rc2,southernafrica)
rc2<-mask(rc2,southernafrica)
rc2<-log10(rc2)-1
rc2<-10^(rc2-1)
rc<-rc+rc2
rrrrr<-as.data.frame(rasterToPoints(rc))
colnames(rrrrr)<-c("x","y","var")
absent<-na.omit(rrrrr[rrrrr$var==0,])
present<-na.omit(rrrrr[rrrrr$var>0,])
present$var<-present$var
data<-rbind(absent,present)
rasterr<-rasterFromXYZ(data)
rrrrr<-as.data.frame(rasterToPoints(rasterr))
colnames(rrrrr)<-c("x","y","var")
rrrrr$var<-log10(1+rrrrr$var)
#rrrrr$var<-as.numeric(data2)-1
max(rrrrr$var)
p4<- ggplot(data = rrrrr) +
geom_raster(aes(x = x, y = y, fill = var))+
scale_fill_gradientn(limits=c(0,5), breaks=seq(0,5, by = 1), colours = c("#E8E8E8","darkgrey","#FCF5C5","#FFF5BE","#ED8E07","#cc0000","#660000"),guide=guide_colourbar(reverse = TRUE))+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white", color = "white"),
axis.line=element_blank(),axis.ticks=element_blank(),axis.text=element_blank())+
borders(database = "world",regions = c('South Africa', 'Botswana','Lesotho', 'Swaziland','Mozambique','Namibia'
,'Zimbabwe','Angola','Zambia','Malawi'),fill = NA,colour = "grey50",xlim = NULL,ylim = c(-34.81917,-4.438023  ))
#annotate("text",x=33, y=-33, label= fff)#+
#annotate("text",x=33, y=-33, label= fff)
fff<-list[3]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc <- crop(ra, e)
rc<-crop(rc,southernafrica)
rc<-mask(rc,southernafrica)
rc<-log10(rc)-1
rc<-10^(rc-1)
fff<-list2[3]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc2 <- crop(ra, e)
rc2<-crop(rc2,southernafrica)
rc2<-mask(rc2,southernafrica)
rc2<-log10(rc2)-1
rc2<-10^(rc2-1)
rc<-rc+rc2
rrrrr<-as.data.frame(rasterToPoints(rc))
colnames(rrrrr)<-c("x","y","var")
absent<-na.omit(rrrrr[rrrrr$var==0,])
present<-na.omit(rrrrr[rrrrr$var>0,])
present$var<-present$var
data<-rbind(absent,present)
rasterr<-rasterFromXYZ(data)
rrrrr<-as.data.frame(rasterToPoints(rasterr))
colnames(rrrrr)<-c("x","y","var")
rrrrr$var<-log10(1+rrrrr$var)
#rrrrr$var<-as.numeric(data2)-1
max(rrrrr$var)
p5<-   ggplot(data = rrrrr) +
geom_raster(aes(x = x, y = y, fill = var))+
scale_fill_gradientn(limits=c(0,5), breaks=seq(0,5, by = 1), colours = c("#E8E8E8","darkgrey","#FCF5C5","#FFF5BE","#ED8E07","#cc0000","#660000"),guide=guide_colourbar(reverse = TRUE))+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white", color = "white"),
axis.line=element_blank(),axis.ticks=element_blank(),axis.text=element_blank())+
borders(database = "world",regions = c('South Africa', 'Botswana','Lesotho', 'Swaziland','Mozambique','Namibia'
,'Zimbabwe','Angola','Zambia','Malawi'),fill = NA,colour = "grey50",xlim = NULL,ylim = c(-34.81917,-4.438023  ))
#annotate("text",x=33, y=-33, label= fff)#+
#annotate("text",x=33, y=-33, label= fff)
fff<-list[7]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc <- crop(ra, e)
rc<-crop(rc,southernafrica)
rc<-mask(rc,southernafrica)
rc<-log10(rc)-1
rc<-10^(rc-1)
fff<-list2[7]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc2 <- crop(ra, e)
rc2<-crop(rc2,southernafrica)
rc2<-mask(rc2,southernafrica)
rc2<-log10(rc2)-1
rc2<-10^(rc2-1)
rc<-rc+rc2
rrrrr<-as.data.frame(rasterToPoints(rc))
colnames(rrrrr)<-c("x","y","var")
absent<-na.omit(rrrrr[rrrrr$var==0,])
present<-na.omit(rrrrr[rrrrr$var>0,])
present$var<-present$var
data<-rbind(absent,present)
rasterr<-rasterFromXYZ(data)
rrrrr<-as.data.frame(rasterToPoints(rasterr))
colnames(rrrrr)<-c("x","y","var")
rrrrr$var<-log10(1+rrrrr$var)
#rrrrr$var<-as.numeric(data2)-1
max(rrrrr$var)
p6<- ggplot(data = rrrrr) +
geom_raster(aes(x = x, y = y, fill = var))+
scale_fill_gradientn(limits=c(0,5), breaks=seq(0,5, by = 1),colours = c("#E8E8E8","darkgrey","#FCF5C5","#FFF5BE","#ED8E07","#cc0000","#660000"),guide=guide_colourbar(reverse = TRUE))+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white", color = "white"),
axis.line=element_blank(),axis.ticks=element_blank(),axis.text=element_blank())+
borders(database = "world",regions = c('South Africa', 'Botswana','Lesotho', 'Swaziland','Mozambique','Namibia'
,'Zimbabwe','Angola','Zambia','Malawi'),fill = NA,colour = "grey50",xlim = NULL,ylim = c(-34.81917,-4.438023  ))
#annotate("text",x=33, y=-33, label= fff)#+
#annotate("text",x=33, y=-33, label= fff)
fff<-list[4]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc <- crop(ra, e)
rc<-crop(rc,southernafrica)
rc<-mask(rc,southernafrica)
rc<-log10(rc)-1
rc<-10^(rc-1)
fff<-list2[4]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc2 <- crop(ra, e)
rc2<-crop(rc2,southernafrica)
rc2<-mask(rc2,southernafrica)
rc2<-log10(rc2)-1
rc2<-10^(rc2-1)
rc<-rc+rc2
rrrrr<-as.data.frame(rasterToPoints(rc))
colnames(rrrrr)<-c("x","y","var")
absent<-na.omit(rrrrr[rrrrr$var==0,])
present<-na.omit(rrrrr[rrrrr$var>0,])
present$var<-present$var
data<-rbind(absent,present)
rasterr<-rasterFromXYZ(data)
rrrrr<-as.data.frame(rasterToPoints(rasterr))
colnames(rrrrr)<-c("x","y","var")
rrrrr$var<-log10(1+rrrrr$var)
#rrrrr$var<-as.numeric(data2)-1
max(rrrrr$var)
p7<-  ggplot(data = rrrrr) +
geom_raster(aes(x = x, y = y, fill = var))+
scale_fill_gradientn(limits=c(0,5), breaks=seq(0,5, by = 1),colours = c("#E8E8E8","darkgrey","#FCF5C5","#FFF5BE","#ED8E07","#cc0000","#660000"),guide=guide_colourbar(reverse = TRUE))+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white", color = "white"),
axis.line=element_blank(),axis.ticks=element_blank(),axis.text=element_blank())+
borders(database = "world",regions = c('South Africa', 'Botswana','Lesotho', 'Swaziland','Mozambique','Namibia'
,'Zimbabwe','Angola','Zambia','Malawi'),fill = NA,colour = "grey50",xlim = NULL,ylim = c(-34.81917,-4.438023  ))
#annotate("text",x=33, y=-33, label= fff)#+
#annotate("text",x=33, y=-33, label= fff)
fff<-list[8]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc <- crop(ra, e)
rc<-crop(rc,southernafrica)
rc<-mask(rc,southernafrica)
rc<-log10(rc)-1
rc<-10^(rc-1)
fff<-list2[8]
ra<-raster(paste0(fff))
e <- extent(10, 40, -38, -5)
rc2 <- crop(ra, e)
rc2<-crop(rc2,southernafrica)
rc2<-mask(rc2,southernafrica)
rc2<-log10(rc2)-1
rc2<-10^(rc2-1)
rc<-rc+rc2
rrrrr<-as.data.frame(rasterToPoints(rc))
colnames(rrrrr)<-c("x","y","var")
absent<-na.omit(rrrrr[rrrrr$var==0,])
present<-na.omit(rrrrr[rrrrr$var>0,])
present$var<-present$var
data<-rbind(absent,present)
rasterr<-rasterFromXYZ(data)
rrrrr<-as.data.frame(rasterToPoints(rasterr))
colnames(rrrrr)<-c("x","y","var")
rrrrr$var<-log10(1+rrrrr$var)
#rrrrr$var<-as.numeric(data2)-1
max(rrrrr$var)
p8<- ggplot(data = rrrrr) +
geom_raster(aes(x = x, y = y, fill = var))+
scale_fill_gradientn(limits=c(0,5), breaks=seq(0,5, by = 1),colours = c("#E8E8E8","darkgrey","#FCF5C5","#FFF5BE","#ED8E07","#cc0000","#660000"),guide=guide_colourbar(reverse = TRUE))+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "white", color = "white"),
axis.line=element_blank(),axis.ticks=element_blank(),axis.text=element_blank())+
borders(database = "world",regions = c('South Africa', 'Botswana','Lesotho', 'Swaziland','Mozambique','Namibia'
,'Zimbabwe','Angola','Zambia','Malawi'),fill = NA,colour = "grey50",xlim = NULL,ylim = c(-34.81917,-4.438023  ))
#annotate("text",x=33, y=-33, label= fff)#+
#annotate("text",x=33, y=-33, label= fff)
setwd("C:/Users/eerdo/Desktop/FinalDynamicSDM")
png(file='Quelea_Combo_Abundance_sorteddscale_15_16.png', width=6400, height=12000, res=1200)
grid.arrange(p1,p2,
p3,p4,
p5,p6,
p7,p8, nrow = 4,ncol=2)
dev.off()
setwd("C:/Users/eerdo/Desktop/FinalDynamicSDM")
png(file='Quelea_Combo_Abundance_Legend.png', width=6400, height=12000, res=1200)
ggplot(data = rrrrr) +
geom_raster(aes(x = x, y = y, fill = var))+
scale_fill_gradientn(name = " ",limits=c(0,5), breaks=seq(0,5, by = 1),labels= c(0,scales::comma(10^1),scales::comma(10^2),scales::comma(10^3),scales::comma(10^4),scales::comma(10^5)),colours = c("#E8E8E8","darkgrey","#FCF5C5","#FFF5BE","#ED8E07","#cc0000","#660000"),guide=guide_colourbar(reverse = TRUE))+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),legend.text = element_text(size=20),legend.key.size = unit(2, 'cm'),
panel.background = element_rect(fill = "white", color = "white"),
axis.line=element_blank(),axis.ticks=element_blank(),axis.text=element_blank())
dev.off()
use_github_action_check_standard(
save_as = "R-CMD-check.yaml",
ref = NULL,
ignore = TRUE,
open = FALSE
)
usethis::use_github_action_check_standard(
save_as = "R-CMD-check.yaml",
ref = NULL,
ignore = TRUE,
open = FALSE
)
usethis::use_github_action_check_standard(
save_as = "R-CMD-check.yaml"
)
dependencies(
path = getwd(),
)
renv::dependencies(
path = getwd(),
)
d<-renv::dependencies(
path = getwd(),
)
d$Package
d[d$Package=="terra",]
raster::crs
data("biome_layer")
data("biome_layer",package="dynamicSDM")
View(biome_layer)
data("biome_layer")
spatial.layer=biome_layer
biome_layer
biome_layer@data
biome_layer@file
data("sample_model_data")
sample_model_data<-dplyr::sample_n(sample_model_data,100)
test_that("stops if no occ.data provided", {
expect_error(spatiotemp_autocorr(varname="Temperaturemean",temporal.level="DOY"))})
library(testthat)
test_that("month temporal.level works with multiple variables", {
varnames<-c("Temperaturemean","Precipitationsum")
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname=varnames,temporal.level="month")
expect_equal(length(results),length(varnames))})
devtools::load_all()
test_that("month temporal.level works with multiple variables", {
varnames<-c("Temperaturemean","Precipitationsum")
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname=varnames,temporal.level="month")
expect_equal(length(results),length(varnames))})
test_that("day method output list object", {
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname="Temperaturemean",temporal.level="day")
expect_equal(class(results),"list")})
test_that("day method output list object", {
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname="Temperaturemean",temporal.level="day")
expect_equal(class(results),"list")})
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname="Temperaturemean",temporal.level="day")
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname="Temperaturemean",temporal.level="day")
test_that("day method output list object", {
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname="Temperaturemean",temporal.level="day")
expect_equal(class(results),"list")})
test_that("day temporal.level outputs length(2) in each list", {
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname="Temperaturemean",temporal.level="day")
expect_equal(length(results[[1]]),2)})
test_that("year temporal.level works with multiple variables", {
varnames<-c("Temperaturemean","Precipitationsum")
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname=varnames,temporal.level="year")
expect_equal(length(results),length(varnames))})
test_that("month temporal.level works with multiple variables", {
varnames<-c("Temperaturemean","Precipitationsum")
results<-spatiotemp_autocorr(occ.data=sample_model_data,varname=varnames,temporal.level="month")
expect_equal(length(results),length(varnames))})
rm("sample_model_data")
data("sample_model_data")
sample_model_data<-dplyr::sample_n(sample_model_data,8000)
data("biome_layer")
sample_model_data<-dplyr::sample_n(sample_model_data,100)
test_that("stops if no occ.data provided", {
expect_error(spatiotemp_block(spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if no vars.to.block.by provided", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),n.blocks=10))})
test_that("stops if spatial.layer not class RasterLayer", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=c(0,20,-20,30),spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.split.degrees not class numeric", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,spatial.split.degrees="three",temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.layer given but no spatial.split.degrees", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if temporal.block not accepted", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("decadal"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("Only temporal blocking by one level, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
sample_model_data<-dplyr::sample_n(sample_model_data,50)
test_that("stops if no occ.data provided", {
expect_error(spatiotemp_block(spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if no vars.to.block.by provided", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),n.blocks=10))})
test_that("stops if spatial.layer not class RasterLayer", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=c(0,20,-20,30),spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.split.degrees not class numeric", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,spatial.split.degrees="three",temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.layer given but no spatial.split.degrees", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if temporal.block not accepted", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("decadal"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("Only temporal blocking by one level, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Doesn't error with only temporal blocking by two feature", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data,temporal.block=c("quarter","year"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Only spatial blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data,spatial.layer = biome_layer,spatial.split.degrees=3,vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Both spatial and temporal blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Errors if too many blocks expected", {
expect_error(spatiotemp_block(occ.data = sample_model_data,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=100000))})
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
sample_model_data2<-dplyr::sample_n(sample_model_data,50)
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
test_that("Errors if too many blocks expected", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=100000))})
test_that("Only spatial blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
data("sample_model_data")
sample_model_data2<-dplyr::sample_n(sample_model_data,8000)
test_that("Both spatial and temporal blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("quarter","year"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("quarter","year"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
biome_layer
raster::raster(extent=c(11.71845, 40.85081, -47.89832, -4.428839 ))
raster::raster(extent=raster::extent(11.71845, 40.85081, -47.89832, -4.428839 ))
x <- raster()
raster::extent(x)
raster::extent(x)<-c(11.71845, 40.85081, -47.89832, -4.428839)
values(x) <- 1:ncell(r)
values(x) <- 1:ncell(x)
x
raster::res(x)<-1
x
plot(raster())
plot(raster)
sp::plot(raster)
sf::plot(raster)
sf::plot(x)
sp::plot(x)
x <- raster()
raster::extent(x)<-c(11.71845, 40.85081, -47.89832, -4.428839)
raster::res(x)<-1
values(x) <- 1:ncell(x)
x
sp::plot(x)
x <- raster()
raster::extent(x)<-c(11.71845, 40.85081, -47.89832, -4.428839)
raster::res(x)<-10
values(x) <- 1:ncell(x)
sp::plot(x)
x
biome_layer<-x
usethis::use_data(biome_layer)
usethis::use_data(biome_layer,overwrite = T)
data("biome_layer")
View(biome_layer)
data("sample_model_data")
sample_model_data2<-dplyr::sample_n(sample_model_data,50)
rm(sample_model_data)
biome_layer <- raster()
raster::extent(biome_layer)<-c(11.71845, 40.85081, -47.89832, -4.428839)
raster::res(biome_layer)<-10
values(biome_layer) <- 1:ncell(biome_layer)
test_that("stops if no occ.data provided", {
expect_error(spatiotemp_block(spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if no vars.to.block.by provided", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),n.blocks=10))})
test_that("stops if spatial.layer not class RasterLayer", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=c(0,20,-20,30),spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.split.degrees not class numeric", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,spatial.split.degrees="three",temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.layer given but no spatial.split.degrees", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if temporal.block not accepted", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("decadal"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=10))})
test_that("Only temporal blocking by one level, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Doesn't error with only temporal blocking by two feature", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("quarter","year"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Only spatial blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Both spatial and temporal blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
tempdir()
file.remove(list.files(tempdir(),full.names = T))
file.remove(list.files(tempdir(),full.names = T,pattern=".gif"))
data("sample_model_data")
sample_model_data2<-dplyr::sample_n(sample_model_data,100)
rm("sample_model_data")
test_that("stops if no occ.data provided", {
expect_error(spatiotemp_autocorr(varname="Temperaturemean",temporal.level="DOY"))})
test_that("stops if method not accepted", {
expect_error(spatiotemp_autocorr(occ.data=sample_model_data2,varname="Temperaturemean",temporal.level="decadal"))})
test_that("day method output list object", {
results<-spatiotemp_autocorr(occ.data=sample_model_data2,varname="Temperaturemean",temporal.level="day")
expect_equal(class(results),"list")})
test_that("day temporal.level outputs length(2) in each list", {
results<-spatiotemp_autocorr(occ.data=sample_model_data2,varname="Temperaturemean",temporal.level="day")
expect_equal(length(results[[1]]),2)})
test_that("year temporal.level works with multiple variables", {
varnames<-c("Temperaturemean","Precipitationsum")
results<-spatiotemp_autocorr(occ.data=sample_model_data2,varname=varnames,temporal.level="year")
expect_equal(length(results),length(varnames))})
test_that("month temporal.level works with multiple variables", {
varnames<-c("Temperaturemean","Precipitationsum")
results<-spatiotemp_autocorr(occ.data=sample_model_data2,varname=varnames,temporal.level="month")
expect_equal(length(results),length(varnames))})
data("sample_model_data")
sample_model_data2<-dplyr::sample_n(sample_model_data,50)
rm(sample_model_data)
biome_layer <- raster()
raster::extent(biome_layer)<-c(11.71845, 40.85081, -47.89832, -4.428839)
raster::res(biome_layer)<-10
values(biome_layer) <- 1:ncell(biome_layer)
test_that("stops if no occ.data provided", {
expect_error(spatiotemp_block(spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if no vars.to.block.by provided", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("month"),n.blocks=10))})
test_that("stops if spatial.layer not class RasterLayer", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=c(0,20,-20,30),spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.split.degrees not class numeric", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,spatial.split.degrees="three",temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if spatial.layer given but no spatial.split.degrees", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data)[9:12],n.blocks=10))})
test_that("stops if temporal.block not accepted", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer=biome_layer,spatial.split.degrees=3,temporal.block=c("decadal"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=10))})
test_that("Only temporal blocking by one level, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Doesn't error with only temporal blocking by two feature", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("quarter","year"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Only spatial blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Both spatial and temporal blocking, results in correct number of unique blocking categories", {
n<-as.numeric(sample(2:10,1))
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Errors if too many blocks expected", {
expect_error(spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=100000))})
n
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
n<-as.numeric(2)
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n)
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n,iterations = 10)
test_that("Only temporal blocking by one level, results in correct number of unique blocking categories", {
n<-as.numeric(2)
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n,iterations = 10)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Doesn't error with only temporal blocking by two feature", {
n<-as.numeric(2)
df<-spatiotemp_block(occ.data = sample_model_data2,temporal.block=c("quarter","year"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n,iterations = 10)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Only spatial blocking, results in correct number of unique blocking categories", {
n<-as.numeric(2)
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n,iterations = 10)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
test_that("Both spatial and temporal blocking, results in correct number of unique blocking categories", {
n<-as.numeric(2)
df<-spatiotemp_block(occ.data = sample_model_data2,spatial.layer = biome_layer,spatial.split.degrees=3,temporal.block=c("month"),vars.to.block.by=colnames(sample_model_data2)[9:12],n.blocks=n,iterations = 10)
expect_equal(length(unique(df$BLOCK.CATS)),n)})
raster::ncell
data("sample_occ_data")
occ.data=sample_occ_data
occ.data.points<- sp::SpatialPointsDataFrame(data = occ.data, coords = cbind(occ.data$x, occ.data$y)) # Convert occ.data co-ordinates into spatial points with same CRS as the grid
occ.data.points
split2<-raster::extract(split_grid, occ.data.points)
